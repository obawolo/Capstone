# importing libraries
import  pandas_datareader.data as web
import pandas as pd
import datetime
import matplotlib.pyplot as plt
import alpha_vantage as sns
import numpy as np
from alpha_vantage.timeseries import TimeSeries
from sklearn.model_selection import train_test_split
from sklearn.linear_model import SGDRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import classification_report
#importing libraries
from sklearn import neighbors
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))

# reading the data
start = datetime.datetime(2020,11,1)
end = datetime.datetime(2020,11,20)
df =web.DataReader("^GSPC",'yahoo',start,end)

#for normalizing data
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))

#print the head
df.head()
#plot
#plt.figure(figsize=(16,8))
#plt.plot(df['Close'], label='Close Price history')

#reset index and cahage date to floats
df = df.reset_index()
df['Date'] = pd.to_datetime(df.Date,format='%Y-%m-%d')

df['Date'] = df['Date'].values.astype(float)
#df.index = df['Date']
#plot
#plt.plot(df['Close'], label='Close Price history')

#sorting #not needed for our data
df = df.sort_index(ascending=True, axis=0)

#split into train and validation
num = df['Close'].size
train_size = int(num * 0.9)
valid_size = int(num * 0.1)

new_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])

for i in range(0,len(df)):
    new_data['Date'][i] = df['Date'][i]
    new_data['Close'][i] = df['Close'][i]


train = new_data[:train_size]
valid = new_data[valid_size:]


x_train = train.drop('Close', axis=1)
y_train = train['Close']
x_valid = valid.drop('Close', axis=1)
y_valid = valid['Close']

#implement linear regression
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)

#make predictions and find the rmse
preds = model.predict(x_valid)
rms=np.sqrt(np.mean(np.power((np.array(y_valid)-np.array(preds)),2)))
rms

#plot
valid['Predictions'] = 0
valid['Predictions'] = preds

valid.index = new_data[valid_size:].index
train.index = new_data[:train_size].index

df['Date'] = pd.to_datetime(df.Date,format='%Y-%m-%d')
df.index = df['Date']
train['Date'] = pd.to_datetime(train.Date,format='%Y-%m-%d')
train.index = train['Date']
valid['Date'] = pd.to_datetime(valid.Date,format='%Y-%m-%d')
valid.index = valid['Date']

#print(df)
plt.figure(figsize=(16,10))
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
